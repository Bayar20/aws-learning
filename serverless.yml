service: serverless-demo
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  endpointType: REGIONAL

  stage: test
  region: us-east-2

  # iam:
  #   role: arn:aws:iam::594990524571:role/s3-full-access

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

plugins:
  - serverless-plugin-include-dependencies
  - serverless-offline
  - serverless-iam-roles-per-function

custom:
  bucketName: bayaar-bucket

functions:
  provideUrl:
    handler: api/provideUrl.handler
    events:
      - http:
          path: /provideUrl
          integration: lambda
          method: GET
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - name
              - type
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: arn:aws:s3:::${self:custom.bucketName}/*
  checkFace:
    handler: api/checkFace.handler
    events:
      - http:
          path: /checkFace
          integration: lambda
          method: GET
          cors: true
      - s3: 
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: faces/
          existing: true  
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "rekognition:*"
        Resource: "*"
  findFace:
    handler: api/findFace.handler
    events:
      - http:
          path: /findFace
          integration: lambda
          method: GET
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - name
              - type
              - Access-Control-Allow-Headers
              - Access-Control-Allow-Origin
            allowCredentials: false
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "rekognition:*"
        Resource: "*"
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource: arn:aws:s3:::${self:custom.bucketName}/*

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
              AllowedOrigins:
                - "*"
  # readData:
  #   handler: api/games.readData
  #   events:
  #     - http:
  #         path: games
  #         integration: lambda
  #         method: get
  #         cors: true
  # writeData:
  #   handler: api/games.writeData
  #   events:
  #     - http:
  #         path: games
  #         integration: lambda
  #         method: post
  #         cors: true
  # checkByUser:
  #   handler: api/games.checkByUser
  #   events:
  #     - http:
  #         path: user
  #         integration: lambda
  #         method: get
  #         cors: true
#      - websocket: $connect
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     Games:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: Games
#         AttributeDefinitions:
#           - AttributeName: "user_id"
#             AttributeType: S
#           - AttributeName: "game_id"
#             AttributeType: S
#         KeySchema:
#           - AttributeName: "user_id"
#             KeyType: "HASH"
#           - AttributeName: "game_id"
#             KeyType: "RANGE"
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
#  NewResource:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
# layers:
#   randomWords:
#     path: layer
